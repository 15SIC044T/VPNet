#!/usr/bin/env bash
#
# VPNet.io - Virtual Private Network Essential Toolbox
#
# https://github.com/acrossfw/vpnet
#
# SSH
#
source /acrossfw/vpnet-module.sh
vpnet::init_bash "${BASH_SOURCE[0]}" # set all the magic

main() {
  # local arg1=${1:-}

  ssh::init_admin
  ssh::init_authorized_keys
#  ssh::init_users

  n=0
  while [[ true ]]; do
    ((++n)) # n++ will cause bash exit, because return 0 (???)
    echo "SSH: Heartbeat #$n ... "
    sleep 60
  done
}

# store ssh authorized key(if set)
ssh::init_authorized_keys() {
  [[ -n "$SSH_AUTHORIZED_KEYS" ]] && {
    echo "ssh:init_authorized_keys Writing authorized_keys for root & $ADMIN_NAME ..."
    local user_name
    local user_home
    local dot_ssh_dir
    for user_name in 'root' "$ADMIN_NAME"; do
      vpnet::get_user_home "$user_name" user_home #|| true # fail safe
      dot_ssh_dir="$user_home/.ssh/"
      [ -d "$dot_ssh_dir" ] || mkdir "$dot_ssh_dir"
      echo "$SSH_AUTHORIZED_KEYS" >> "${dot_ssh_dir}authorized_keys"
      chmod 700 "${dot_ssh_dir}"
      chmod 600 "${dot_ssh_dir}authorized_keys"
      chown -R "$user_name" "$dot_ssh_dir"
    done
  }
}

ssh::init_admin() {  
  ADD_USER_HOME="/home/$ADMIN_NAME"
  ADD_USER_NAME="$ADMIN_NAME"
  ADD_USER_PASS="$ADMIN_PASS"
  
  echo "ssh::init_admin Create user home if not exist ... "
  [[ -d "$ADD_USER_HOME" ]] || {
    adduser --quiet --disabled-password -shell /bin/bash --home "$ADD_USER_HOME" --gecos "$ADD_USER_NAME" "$ADD_USER_NAME"
  }
  echo "SSH: Reset password every time ... "
  echo "$ADD_USER_NAME:$ADD_USER_PASS" | chpasswd
}

main "$@"

echo "ERROR: ssh loop error, exited"
sleep 1
exit -1