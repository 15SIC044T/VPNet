#!/usr/bin/env bash
#
# VPNet.io - Virtual Private Network Essential Toolbox
#
# https://github.com/acrossfw/vpnet
#
# SSH
#
source /acrossfw/vpnet-module.sh
vpnet::init_bash ${BASH_SOURCE[0]} # set all the magic

main() {
  local arg1=${1:-}

  ssh::init_authorized_keys
  ssh::init_admin
#  ssh::init_users

  n=0
  while [[ true ]]; do
    ((++n)) # n++ will cause bash exit, because return 0 (???)
    echo "SSH: Heartbeat #$n ... "
    sleep 60
  done
}

# store ssh authorized key(if set)
ssh::init_authorized_keys() {
  [[ -n "$SSH_AUTHORIZED_KEYS" ]] && {
    echo "SSH: Writing authorized_keys for root ..."
    DOT_SSH_DIR="/root/.ssh"
    [ -d "$DOT_SSH_DIR" ] || mkdir $DOT_SSH_DIR && chmod 700 $DOT_SSH_DIR
    echo $SSH_AUTHORIZED_KEYS >> $DOT_SSH_DIR/authorized_keys
    chmod 600 $DOT_SSH_DIR/authorized_keys
  }
}

ssh::init_admin() {  
  ADD_USER_HOME="/home/$ADMIN_NAME"
  ADD_USER_NAME="$ADMIN_NAME"
  ADD_USER_PASS="$ADMIN_PASS"
  
  echo "SSH: Create user home if not exist ... "
  [[ -d "$ADD_USER_HOME" ]] || {
    adduser --quiet --disabled-password -shell /bin/bash --home "$ADD_USER_HOME" --gecos "$ADD_USER_NAME" "$ADD_USER_NAME"
  }
  echo "SSH: Reset password every time ... "
  echo "$ADD_USER_NAME:$ADD_USER_PASS" | chpasswd
}

main "$@"

echo "ERROR: ssh loop error, exited"
sleep 1
exit -1